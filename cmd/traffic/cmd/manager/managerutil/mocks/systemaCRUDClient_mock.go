// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telepresenceio/telepresence/v2/cmd/traffic/cmd/manager/managerutil (interfaces: SystemaCRUDClient)

// Package mockmanagerutil is a generated GoMock package.
package mockmanagerutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/telepresenceio/telepresence/rpc/v2/common"
	systema "github.com/telepresenceio/telepresence/rpc/v2/systema"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSystemaCRUDClient is a mock of SystemaCRUDClient interface.
type MockSystemaCRUDClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemaCRUDClientMockRecorder
}

// MockSystemaCRUDClientMockRecorder is the mock recorder for MockSystemaCRUDClient.
type MockSystemaCRUDClientMockRecorder struct {
	mock *MockSystemaCRUDClient
}

// NewMockSystemaCRUDClient creates a new mock instance.
func NewMockSystemaCRUDClient(ctrl *gomock.Controller) *MockSystemaCRUDClient {
	mock := &MockSystemaCRUDClient{ctrl: ctrl}
	mock.recorder = &MockSystemaCRUDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemaCRUDClient) EXPECT() *MockSystemaCRUDClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSystemaCRUDClient) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSystemaCRUDClientMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSystemaCRUDClient)(nil).Close), arg0)
}

// CreateDomain mocks base method.
func (m *MockSystemaCRUDClient) CreateDomain(arg0 context.Context, arg1 *systema.CreateDomainRequest, arg2 ...grpc.CallOption) (*systema.CreateDomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomain", varargs...)
	ret0, _ := ret[0].(*systema.CreateDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockSystemaCRUDClientMockRecorder) CreateDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockSystemaCRUDClient)(nil).CreateDomain), varargs...)
}

// PreferredAgent mocks base method.
func (m *MockSystemaCRUDClient) PreferredAgent(arg0 context.Context, arg1 *common.VersionInfo, arg2 ...grpc.CallOption) (*systema.PreferredAgentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreferredAgent", varargs...)
	ret0, _ := ret[0].(*systema.PreferredAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreferredAgent indicates an expected call of PreferredAgent.
func (mr *MockSystemaCRUDClientMockRecorder) PreferredAgent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreferredAgent", reflect.TypeOf((*MockSystemaCRUDClient)(nil).PreferredAgent), varargs...)
}

// RemoveDomain mocks base method.
func (m *MockSystemaCRUDClient) RemoveDomain(arg0 context.Context, arg1 *systema.RemoveDomainRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveDomain", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDomain indicates an expected call of RemoveDomain.
func (mr *MockSystemaCRUDClientMockRecorder) RemoveDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDomain", reflect.TypeOf((*MockSystemaCRUDClient)(nil).RemoveDomain), varargs...)
}

// RemoveIntercept mocks base method.
func (m *MockSystemaCRUDClient) RemoveIntercept(arg0 context.Context, arg1 *systema.InterceptRemoval, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveIntercept", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIntercept indicates an expected call of RemoveIntercept.
func (mr *MockSystemaCRUDClientMockRecorder) RemoveIntercept(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIntercept", reflect.TypeOf((*MockSystemaCRUDClient)(nil).RemoveIntercept), varargs...)
}
